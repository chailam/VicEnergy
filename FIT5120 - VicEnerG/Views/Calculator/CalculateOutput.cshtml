@model FIT5120___VicEnerG.ViewModels.CalculatorViewModel
@{
    ViewBag.Title = "Solar Calculator";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<!-- Calculator feature page display starts here! -->
<div class="container body-content" id="information-entry">
    <div class="container">
        <hr>
        <h3 class="heading">Solar Output Calculator</h3>
    </div>


    <div class="row">
        <div class="Calculator-Content Content">
            <!-- Annotation & input form-->
            <div class="row" id="DataInput">
                <!-- Annotation section-->
                <div class="col-md-6">
                    <div class="Calculator-Content Annotation abouttopleft">
                        <p>
                            By putting the postcode and estimated number of solar panels,
                            our system can calculate the estimated solar output for 12 months.
                        </p>
                        <br>
                        <p>There are a few limitations to our calculator:</p>
                        <ol>
                            <li><p>Maximum of 10 solar panels can be used in the estimation.</p></li>
                            <li><p>The system only accepts residential postcodes in Victoria (3000-3999).</p></li>
                            <li><p>The estimated output is not considered about shading and angles of the panel.</p></li>
                        </ol>
                        <a href="~/Home/SolarInfo" target="_blank">Know more about Solar General Information</a>
                        <br>
                        <a href="~/Home/SolarRebates" target="_blank">Know more about Solar Rebates</a>
                    </div>
                </div>
                <!-- Information input form-->
                <div class="col-md-6 par">
                    <div class="Calculator-Content Input abouttopleft">
                        <h3>Information Entry</h3><br>
                        @using (Html.BeginForm()) {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Postcode, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @if (Model.Postcode == 0) {
                                            @Html.TextBox("Postcode", "", new { placeholder = "Your postcode", HtmlAttributes = new { @class = "form-control" } })
                                        }
                                        else {
                                            @Html.TextBoxFor(model => model.Postcode, new { HtmlAttributes = new { @class = "form-control", @Value = Model.Postcode } })
                                        }
                                        @Html.ValidationMessageFor(model => model.Postcode, "", new { @class = "text-danger col-md-10" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.NumberPanels, "Number of Panels", htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @if (Model.NumberPanels == 0) {
                                            @Html.TextBox("NumberPanels", "", new { placeholder = "Potential numbers", HtmlAttributes = new { @class = "form-control" } })
                                        }
                                        else {
                                            @Html.TextBoxFor(model => model.NumberPanels, new { HtmlAttributes = new { @class = "form-control", @Value = Model.NumberPanels } })
                                        }
                                        @Html.ValidationMessageFor(model => model.NumberPanels, "", new { @class = "text-danger col-md-10" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-offset-4 col-md-8">
                                        <input type="submit" class="btn btn-primary" value="Calculate" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        @{
            if (Model.Station != null) {
                <div class="Calculator-Content OutputDescription abouttopleft par" id="OutputResult">
                    <h3>Electricity Output</h3>
                    <h4>The Estimated annual electricity output for <p2>@Model.Postcode</p2> with <p2>@Model.NumberPanels</p2> solar panel(s)</h4><br>
                    <div class="result">
                        @Model.AnnualOutput kWh/year
                    </div>
                    <p>*The radiation data is collected from the station called @Model.Station.stationName with Station ID @Model.Station.stationNumber</p>
                    <p>*The Solar output is followed by the formula:  <p2>E = A * r * H * PR</p2></p>
                    <ul>
                        <li><p>E = Energy (kWh)</p></li>
                        <li><p>A = Total solar panel Area (In this calculator is 1.6m2)</p></li>
                        <li><p>r = Solar panel yield or efficiency(In this calculator is 15.6%)</p></li>
                        <li><p>H = solar radiation data collected from stations (shadings not included)</p></li>
                        <li><p>PR = Performance ratio, the coefficient for losses (In this calculator is 75%)</p></li>
                    </ul>



                    <table width="100%" style="table-layout: fixed">
                        <tr>
                            <th></th>
                            @foreach (string Output in ViewBag.Month) {
                                <th style="max-width: 150px; word-wrap: break-word;">@Output</th>
                            }
                        </tr>
                        <tr>
                            <td style="max-width: 150px; word-wrap: break-word;">kWh</td>
                            @foreach (double Output in Model.OutputList) {
                                <td style="max-width: 150px; word-wrap: break-word;">@Output</td>
                            }
                        </tr>
                    </table>
                    <br>
                    <h4>Please input the postcode you want to <b style="color:#200E0B ">compare</b> the electricity output.</h4>
                    <div>
                        <form id="myForm" class="form-horizontal">
                            <div class="form-group" style="margin-left: 220px">
                                @Html.LabelFor(model => model.Postcode, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    <input id="comparePostcode" type="number" name="Postcode" placeholder="xxxx" />
                                    <p5 id="error" style="color: #FF0000"></p5>
                                </div>
                                <input type="hidden" name="NumberPanels" class="btn btn-primary" value=@Model.NumberPanels />
                                <div class="col-md-offset-1 col-md-3">
                                    <input type="button" class="btn btn-primary" value="Compare" onclick="SubForm()" style="width:9rem" />
                                    <input id="delete" type="button" class="btn btn-primary" value="Delete" onclick="DeleteCompare()" style="width:9rem;" />
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="Calculator-Content OutputChart">
                        <div class="panel-body">
                            <canvas id="bar_chart" height="150"></canvas>
                        </div>
                    </div>
                </div>


                <!-- Electric Appliances -->
                <div class="Calculator-Content ApplianceUsage abouttopleft par" id="ApplianceUsage">
                    <h3>Appliance Usage</h3>
                    <p>This feature will convert the electricity output generated by solar panels of each month to the usage of different appliances</p>
                    <br><p>Please select one of the appliances from the list to see its usage</p><br>
                    @Html.DropDownList("ApplianceList",
                     new SelectList(Model.Extrahours.Keys.ToList()),
                     "Choose Appliance")

                    <div>
                        <div class="Calculator-Content ApplianceChart">
                            <div class="panel-body">
                                <canvas id="line_chart" height="150"></canvas>
                            </div>
                        </div>
                        <div id="tips" style="display: none;">
                            <p>
                                *E.g The electricity output generated by the solar panel in <b>January</b> will allows you to use <b id="appliance"></b> for <b id="hours"></b> hours
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Carbon Emission Calculate -->

                <div class="Calculator-Content CarbonDescription abouttopleft par" id="CarbonInformation">
                    <h3>Carbon Dioxide Emissions</h3>
                    <p>
                        Using solar panels to generate electricity will effectively reduce the amount of Carbon Dioxide emission (CO2).
                        Because approximately 40% of global CO2 emissions are emitted from electricity generation which is by burning fuels.
                    </p>
                    <h4>The <b>Annual</b> Carbon Dioxide Emission</h4>
                    <div class="result">
                        @Model.CO2 <p>metric tons CO2/kWh</p>
                    </div>
                    <p>*The number means the amount of Carbon Dioxide you have reduced by using solar panels in one year </p>
                    <p>*According to the Department of Environment, Land and water of Australia. The formula to convert electricity to Carbon Dioxide is: </p>
                    <p2>1kWh = 1.13kg CO2-e/kWh</p2>
                    <br>
                    <br>
                    <div>
                        @using (Html.BeginForm("CalculateCarbon", "Carbon")) {
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="Postcode" name="Postcode" value=@Model.Postcode />
                            <input type="hidden" id="NumberPanels" name="NumberPanels" value=@Model.NumberPanels />
                            <input type="submit" class="btn btn-primary btn-lg btn-block btn-carbon-redirect" value="Find out more at Carbon Calculator" />
                        }
                    </div>
                </div>

                <!-- Side Dotted Navigation Bar Start -->
                <div class="vNav">
                    <ul class="vNav">
                        <li>
                            <a href="#information-entry">
                                <div class="label">Information Entry</div>
                            </a>
                        </li>
                        <li>
                            <a href="#OutputResult">
                                <div class="label">Electricity Output</div>
                            </a>
                        </li>
                        <li>
                            <a href="#ApplianceUsage">
                                <div class="label">Appliance Usage</div>
                            </a>
                        </li>
                        <li>
                            <a href="#CarbonInformation">
                                <div class="label">Carbon Dioxide Emission</div>
                            </a>
                        </li>
                    </ul>
                </div>
                <!-- Side Dotted Navigation Bar End -->
            }
        }

    </div>
</div>




<style>
    label.error {
        color: red;
    }
</style>
<script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/jquery.validate.min.js"></script>
<script src="https://cdn.jsdelivr.net/jquery.validation/1.16.0/additional-methods.min.js"></script>
<!-- Calculator feature page display ends here! -->
@section scripts{
    @Scripts.Render("~/bundles/chartjs")
    <script>
    // check if compare Chart exist.
    var compareBarPop = false;
    // make it global;
    var bar_chart;

        function SubForm() {
            var text = "";
            var postcode = document.getElementById("comparePostcode").value;
            var original = @Html.Raw(Json.Encode(Model.Postcode));
            if (postcode == "" && postcode == 0) {
                text = "Postcode is required for comparison"
            } else if (postcode < 3000 || postcode > 3999) {
                text = "Victoria postcode is in between 3000-3999"
            } else if (postcode == original) {
                text = "Cannot compare to the same postcode"
            } else {
                $.ajax({
                url: '/Calculator/Compare',
                type: 'post',
                data: $('#myForm').serialize(),
                dataType: "JSON",
                success: function (data) {
                    // set bar chart dataset and show compared chart.
                    document.getElementById("delete").style.display = "";
                    showCompareBarChart(data)
                }
            });
            }
            document.getElementById("error").innerHTML = text;
        }

        function DeleteCompare() {
            if (bar_chart.data.datasets.length > 2) {
                bar_chart.data.datasets.pop();
                bar_chart.update();
                compareBarPop = false;
                document.getElementById("delete").style.display = "none";
                document.getElementById("comparePostcode").value = "";
            }
        }

        function showCompareBarChart(data) {
            var barDataSet =
            {
                label: data.Postcode + " Output",
                data: data.OutputList,
                backgroundColor: "rgba(252,186,3,.5)",
                borderColor: "rgb(127,255,0)",
                borderWidth: 1,
            };
            if (compareBarPop) {
                // delete the last compare dataset.
                bar_chart.data.datasets.pop();
                bar_chart.data.datasets.push(barDataSet);
                bar_chart.update();
            } else {
                bar_chart.data.datasets.push(barDataSet);
                bar_chart.update();
                compareBarPop = true;
            }
        };

    $(document).ready(function () {
        var MonthArray = @Html.Raw(Json.Encode(ViewBag.Month));

        var line_chart;
        var check = @Model.Postcode;
        function pagelayout() {
            if (check != 0) {
                document.getElementById("wthree_copy_right").style.position = "relative";
            }
            else {
                document.getElementById("wthree_copy_right").style.position = "absolute";
            }
        };

        function chartinitialize() {
            // Display the line chart by the element ID
            var line_chart_display = $("#line_chart");
            var bar_chart_display = $("#bar_chart");
            // Initial bar feature
            bar_chart = new Chart(bar_chart_display, {
                type: 'bar',
                data: {
                        labels: MonthArray,
                    datasets: []
                },
                options: {
                        title: {
                            display: true,
                        text: "Solar Panel Electricity Output",
                        fontSize: 18
                        },
                    legend:
                            {
                            display: true,
                    }
                        }
                    });
            // Initial chart feature
            line_chart = new Chart(line_chart_display, {
                    type: 'line',
                data: {
                        labels: MonthArray,
                    datasets: []
                },
                options: {
                        responsive: true,
                    title: {
                        display: true,
                        text: "",
                        fontSize: 18
                    },
                    legend:
                            {
                            display: false,
                    },
                    scales: {
                            yAxes: [{
                                display: true,
                            ticks: {
                                    beginAtZero: true
                            }
                                }]
                    }
                        }
                    });
        };

        function showBarChart() {

            var Output = @Html.Raw(Json.Encode(Model.OutputList));
            var postcode = @Html.Raw(Json.Encode(Model.Postcode));
            var VictoriaAverage = @Html.Raw(Json.Encode(Model.VictoriaAverage));

            var barDataSet = {
                label: postcode + " Output",
                data: Output,
                backgroundColor: "rgba(127,255,0,.5)",
                borderColor: "rgb(127,255,0)",
                borderWidth: 1,
            };
            var averageDataSet = {
                label: 'Victoria Average Output',
                data: VictoriaAverage,
                borderColor: "rgba(219, 15, 15)",
                backgroundColor: "rgb(219, 15, 15,.5)",
                stack: 'combined',
                type: 'line',
                fill: false,
                tension: 0
            };
            bar_chart.data.datasets.push(averageDataSet);
            bar_chart.data.datasets.push(barDataSet);
            bar_chart.update();
        };

        function showLineChart() {
            // Obtain the selection from website
            var ApplianceName = document.getElementById("ApplianceList").value;
            // Encode the variables from controller
            var DicKey= @Html.Raw(Json.Encode(Model.Extrahours.Keys.ToList()));
            var DicValue = @Html.Raw(Json.Encode(Model.Extrahours.Values.ToList()));
            line_chart.options.title.text = "Extra hours for " + ApplianceName;
            // Find corresponding dataset for if matching appliance is found
            var ListData = []
            for (let i = 0; i < DicKey.length; i++) {
                if (DicKey[i] == ApplianceName) {
                    ListData = DicValue[i];
                }
            }
                // Remove the previous appliance data if new appliance is selected
                line_chart.data.datasets.pop();
                line_chart.update();

                // Add the selected appliance data to the chart
                var dataset = {
                    label: "hours",
                    fill: false,
                    data: ListData,
                    backgroundColor: "rgba(0,0,255,.5)",
                    borderColor: "rgb(0,0,255)"
            }
            var hours = ListData[0];
            if (hours > 0) {
                document.getElementById("tips").style.display = "block";
                document.getElementById("hours").innerHTML = hours;
                document.getElementById("appliance").innerHTML = ApplianceName;
            } else {
                document.getElementById("tips").style.display = "none";
            }
            line_chart.data.datasets.push(dataset);
            // Update the chart
            line_chart.update();
        }

     // Apply the function when the page load up
        pagelayout();
        if (check != 0) {
            chartinitialize();
            showBarChart();
            document.getElementById("delete").style.display = "none";
        }
        $('#ApplianceList').on('change', function () { showLineChart() });
    });

    </script>
}





